-- MySQL Script generated by MySQL Workbench
-- Sun Jun  5 00:10:37 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`project`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`project` (
  `project_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(64) NOT NULL,
  `summary` VARCHAR(128) NOT NULL,
  `amount` DOUBLE NOT NULL,
  `starting_date` DATE NOT NULL,
  `finish_date` DATE NOT NULL,
  `duration` SMALLINT(4) NULL,
  PRIMARY KEY (`project_id`),
  INDEX `index_fin` (`finish_date` ASC) INVISIBLE,
  INDEX `index_am` (`amount` ASC) VISIBLE,
  UNIQUE INDEX `project_id_UNIQUE` (`project_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`researcher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`researcher` (
  `researcher_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(32) NOT NULL,
  `surname` VARCHAR(32) NOT NULL,
  `sex` ENUM('male', 'female') NOT NULL,
  `date_of_birth` DATE NOT NULL,
  `age` SMALLINT(3) NULL,
  PRIMARY KEY (`researcher_id`),
  INDEX `index_dob` (`date_of_birth` ASC) INVISIBLE,
  INDEX `index_age` (`age` ASC) VISIBLE,
  UNIQUE INDEX `researcher_id_UNIQUE` (`researcher_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`organisation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`organisation` (
  `organisation_id` INT NOT NULL AUTO_INCREMENT,
  `org_name` VARCHAR(40) NOT NULL,
  `abbreviation` VARCHAR(10) NOT NULL,
  `address` VARCHAR(80) NOT NULL,
  `postal_code` MEDIUMINT(3) NOT NULL,
  `city` VARCHAR(20) NOT NULL,
  `organisation_type` ENUM('research center', 'university', 'company') NOT NULL,
  PRIMARY KEY (`organisation_id`),
  UNIQUE INDEX `organisation_id_UNIQUE` (`organisation_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`executive`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`executive` (
  `executive_id` INT NOT NULL AUTO_INCREMENT,
  `exec_name` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`executive_id`),
  UNIQUE INDEX `executive_id_UNIQUE` (`executive_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`program`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`program` (
  `program_id` INT NOT NULL AUTO_INCREMENT,
  `prog_name` VARCHAR(40) NOT NULL,
  `address` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`program_id`),
  UNIQUE INDEX `program_id_UNIQUE` (`program_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`evaluation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`evaluation` (
  `eval_project_id` INT NOT NULL,
  `eval_researcher_id` INT NOT NULL,
  `date_of_eval` DATE NOT NULL,
  `score` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`eval_project_id`, `eval_researcher_id`),
  INDEX `researcher_id_idx` (`eval_researcher_id` ASC) VISIBLE,
  CONSTRAINT `eval_project_id`
    FOREIGN KEY (`eval_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `eval_researcher_id`
    FOREIGN KEY (`eval_researcher_id`)
    REFERENCES `mydb`.`researcher` (`researcher_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`deliverable`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`deliverable` (
  `deliverable_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `title` VARCHAR(64) NOT NULL,
  `summary` VARCHAR(128) NOT NULL,
  `date_of_deliver` DATE NOT NULL,
  PRIMARY KEY (`project_id`, `deliverable_id`),
  UNIQUE INDEX `deliverable_id_UNIQUE` (`deliverable_id` ASC) VISIBLE,
  CONSTRAINT `project_id`
    FOREIGN KEY (`project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
ROW_FORMAT = COMPACT;


-- -----------------------------------------------------
-- Table `mydb`.`licensing`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`licensing` (
  `licensing_project_id` INT NOT NULL,
  `licensing_program_id` INT NOT NULL,
  INDEX `program_id_idx` (`licensing_program_id` ASC) VISIBLE,
  PRIMARY KEY (`licensing_project_id`, `licensing_program_id`),
  CONSTRAINT `licensing_project_id`
    FOREIGN KEY (`licensing_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `licensing_program_id`
    FOREIGN KEY (`licensing_program_id`)
    REFERENCES `mydb`.`program` (`program_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`science_field`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`science_field` (
  `science_field_id` INT NOT NULL AUTO_INCREMENT,
  `canonical_name` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`science_field_id`),
  INDEX `index_n` (`canonical_name` ASC) VISIBLE,
  UNIQUE INDEX `science_field_id_UNIQUE` (`science_field_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`in_field`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`in_field` (
  `infield_project_id` INT NOT NULL,
  `infield_science_field_id` INT NOT NULL,
  PRIMARY KEY (`infield_project_id`, `infield_science_field_id`),
  INDEX `science_field_id_idx` (`infield_science_field_id` ASC) VISIBLE,
  CONSTRAINT `infield_project_id`
    FOREIGN KEY (`infield_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `infield_science_field_id`
    FOREIGN KEY (`infield_science_field_id`)
    REFERENCES `mydb`.`science_field` (`science_field_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`administration_ex`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`administration_ex` (
  `administrationex_project_id` INT NOT NULL,
  `administrationex_executive_id` INT NOT NULL,
  INDEX `executive_id_idx` (`administrationex_executive_id` ASC) VISIBLE,
  PRIMARY KEY (`administrationex_executive_id`, `administrationex_project_id`),
  CONSTRAINT `administrationex_project_id`
    FOREIGN KEY (`administrationex_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `administrationex_executive_id`
    FOREIGN KEY (`administrationex_executive_id`)
    REFERENCES `mydb`.`executive` (`executive_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`administration`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`administration` (
  `administration_project_id` INT NOT NULL,
  `administration_organisation_id` INT NOT NULL,
  PRIMARY KEY (`administration_project_id`, `administration_organisation_id`),
  INDEX `organisation_id_idx` (`administration_organisation_id` ASC) VISIBLE,
  CONSTRAINT `administration_project_id`
    FOREIGN KEY (`administration_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `administration_organisation_id`
    FOREIGN KEY (`administration_organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`works_on`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`works_on` (
  `workson_project_id` INT NOT NULL,
  `workson_researcher_id` INT NOT NULL,
  PRIMARY KEY (`workson_project_id`, `workson_researcher_id`),
  INDEX `researcher_id_idx` (`workson_researcher_id` ASC) VISIBLE,
  CONSTRAINT `workson_project_id`
    FOREIGN KEY (`workson_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `workson_researcher_id`
    FOREIGN KEY (`workson_researcher_id`)
    REFERENCES `mydb`.`researcher` (`researcher_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`science_director`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`science_director` (
  `dir_project_id` INT NOT NULL AUTO_INCREMENT,
  `dir_researcher_id` INT NOT NULL,
  PRIMARY KEY (`dir_project_id`, `dir_researcher_id`),
  INDEX `researcher_id_idx` (`dir_researcher_id` ASC) VISIBLE,
  CONSTRAINT `dir_project_id`
    FOREIGN KEY (`dir_project_id`)
    REFERENCES `mydb`.`project` (`project_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `dir_researcher_id`
    FOREIGN KEY (`dir_researcher_id`)
    REFERENCES `mydb`.`researcher` (`researcher_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`employee` (
  `emp_researcher_id` INT NOT NULL,
  `emp_organisation_id` INT NOT NULL,
  PRIMARY KEY (`emp_researcher_id`, `emp_organisation_id`),
  INDEX `organisation_id_idx` (`emp_organisation_id` ASC) VISIBLE,
  CONSTRAINT `emp_researcher_id`
    FOREIGN KEY (`emp_researcher_id`)
    REFERENCES `mydb`.`researcher` (`researcher_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `emp_organisation_id`
    FOREIGN KEY (`emp_organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`category` (
  `category_id` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`category_id`));


-- -----------------------------------------------------
-- Table `mydb`.`phones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`phones` (
  `organisation_id` INT NOT NULL,
  `phone_number` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`organisation_id`),
  CONSTRAINT `organisation_id`
    FOREIGN KEY (`organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`budgetu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`budgetu` (
  `u_organisation_id` INT NOT NULL,
  `budgetuni` DOUBLE NOT NULL,
  PRIMARY KEY (`u_organisation_id`),
  UNIQUE INDEX `u_organisation_id_UNIQUE` (`u_organisation_id` ASC) VISIBLE,
  CONSTRAINT `u_organisation_id`
    FOREIGN KEY (`u_organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`budgetres`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`budgetres` (
  `r_organisation_id` INT NOT NULL,
  `budgetres1` DOUBLE NOT NULL,
  `budgetres2` DOUBLE NOT NULL,
  PRIMARY KEY (`r_organisation_id`),
  UNIQUE INDEX `r_organisation_id_UNIQUE` (`r_organisation_id` ASC) VISIBLE,
  CONSTRAINT `r_organisation_id`
    FOREIGN KEY (`r_organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`budgetcom`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`budgetcom` (
  `c_organisation_id` INT NOT NULL,
  `budgetcorp` DOUBLE NOT NULL,
  PRIMARY KEY (`c_organisation_id`),
  UNIQUE INDEX `c_organisation_id_UNIQUE` (`c_organisation_id` ASC) VISIBLE,
  CONSTRAINT `c_organisation_id`
    FOREIGN KEY (`c_organisation_id`)
    REFERENCES `mydb`.`organisation` (`organisation_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`executive_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`executive_vw` (`executive_id` INT, `exec_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`project_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`project_vw` (`project_id` INT, `title` INT, `summary` INT, `amount` INT, `starting_date` INT, `finish_date` INT, `duration` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`program_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`program_vw` (`program_id` INT, `prog_name` INT, `address` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`science_field_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`science_field_vw` (`science_field_id` INT, `canonical_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`deliverable_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`deliverable_vw` (`project_id` INT, `title` INT, `summary` INT, `date_of_deliver` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`researcher_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`researcher_vw` (`researcher_id` INT, `first_name` INT, `surname` INT, `sex` INT, `date_of_birth` INT, `age` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`organisation_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`organisation_vw` (`id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`first_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`first_vw` (`project_id` INT, `first_name` INT, `surname` INT, `title` INT, `age` INT, `sex` INT, `researcher_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`second_vw`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`second_vw` (`org_name` INT, `title` INT);

-- -----------------------------------------------------
-- View `mydb`.`executive_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`executive_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `executive_vw` AS
	SELECT executive_id, exec_name
		FROM executive;

-- -----------------------------------------------------
-- View `mydb`.`project_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`project_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `project_vw` AS
SELECT project_id, title, summary, amount, starting_date, finish_date, duration
		FROM project;

-- -----------------------------------------------------
-- View `mydb`.`program_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`program_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `program_vw` AS
	SELECT program_id, prog_name, address
		FROM program;

-- -----------------------------------------------------
-- View `mydb`.`science_field_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`science_field_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `science_field_vw` AS
 SELECT science_field_id, canonical_name
	FROM science_field;

-- -----------------------------------------------------
-- View `mydb`.`deliverable_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`deliverable_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `deliverable_vw` AS
	SELECT project_id, title, summary, date_of_deliver
		FROM deliverable;

-- -----------------------------------------------------
-- View `mydb`.`researcher_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`researcher_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `researcher_vw` AS
	SELECT researcher_id, first_name, surname, sex, date_of_birth, age
		FROM researcher;

-- -----------------------------------------------------
-- View `mydb`.`organisation_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`organisation_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `organisation_vw` AS
	(SELECT organisation_id, org_name, abbreviation, address, postal_code, city, organisation_type,budgetuni as temp1,budgetuni as temp2
		FROM organisation inner join budgetu on organisation_id = u_organisation_id
	)
    union
    (
    SELECT organisation_id, org_name, abbreviation, address, postal_code, city, organisation_type,budgetres1 as temp1, budgetres2 as temp2
		FROM organisation inner join budgetres on organisation_id = r_organisation_id
    )
    union
    (
    SELECT organisation_id, org_name, abbreviation, address, postal_code, city, organisation_type,budgetcorp as temp1,budgetcorp as temp2
		FROM organisation inner join budgetcom on organisation_id = c_organisation_id
    );

-- -----------------------------------------------------
-- View `mydb`.`first_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`first_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `first_vw` AS
	select project_id,first_name,surname,title,age,sex,researcher_id from researcher inner join works_on on researcher_id = workson_researcher_id inner join project on project_id = workson_project_id order by project_id;

-- -----------------------------------------------------
-- View `mydb`.`second_vw`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`second_vw`;
USE `mydb`;
CREATE  OR REPLACE VIEW `second_vw` AS
	select org_name, title from organisation inner join administration on administration_organisation_id = organisation_id inner join project on administration_project_id = project_id;
USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`project_BEFORE_INSERT` BEFORE INSERT ON `project` FOR EACH ROW
BEGIN
	if (new.amount <= 0 or new.starting_date > new.finish_date) then
		signal sqlstate '45000' set message_text = 'Not valid project';
    end if;
    if (DATEDIFF(new.finish_date, new.starting_date) > 364 and DATEDIFF(new.finish_date, new.starting_date) < 1461) then
		SET new.duration = DATEDIFF(new.finish_date, new.starting_date);
    else	
		signal sqlstate '45000' set message_text = 'Not valid duration';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`researcher_BEFORE_INSERT` BEFORE INSERT ON `researcher` FOR EACH ROW
BEGIN
	SET new.age = DATEDIFF(CURDATE(), new.date_of_birth) / 365;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`evaluation_BEFORE_INSERT` BEFORE INSERT ON `evaluation` FOR EACH ROW
BEGIN
	if(new.date_of_eval > (SELECT starting_date FROM project WHERE project_id = new.eval_project_id)) then
		signal sqlstate '45000' set message_text = 'invalid date for evaluation';
    end if;	
    if exists(SELECT * FROM employee inner join administration WHERE 
		administration_project_id = new.eval_project_id and 
        administration_organisation_id = emp_organisation_id and
        emp_researcher_id = new.eval_researcher_id) then
		signal sqlstate '45000' set message_text = 'Not valid employee';
	end if;
    if exists(SELECT * FROM evaluation WHERE eval_project_id = new.eval_project_id) then
		signal sqlstate '45000' set message_text = 'Project has an evaluation';
	end if;
    if exists(SELECT * FROM works_on WHERE workson_project_id = new.eval_project_id and workson_researcher_id = new.eval_researcher_id) then
		signal sqlstate '45000' set message_text = 'Project has an evaluation';
	end if;
    if exists(SELECT * FROM science_director WHERE dir_project_id = new.eval_project_id and dir_researcher_id = new.eval_researcher_id) then
		signal sqlstate '45000' set message_text = 'Project has an evaluation';
	end if;
    
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`evaluation_BEFORE_UPDATE` BEFORE UPDATE ON `evaluation` FOR EACH ROW
BEGIN
	if(new.date_of_eval > (SELECT starting_date FROM project WHERE project_id = new.eval_project_id)) then
		signal sqlstate '45000' set message_text = 'invalid date for evaluation';
    end if;	
    if exists(SELECT * FROM employee inner join administration WHERE 
		administration_project_id = new.eval_project_id and 
        administration_organisation_id = emp_organisation_id and
        emp_researcher_id = new.eval_researcher_id) then
		signal sqlstate '45000' set message_text = 'Not valid employee';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`deliverable_BEFORE_INSERT` BEFORE INSERT ON `deliverable` FOR EACH ROW
BEGIN
	if(new.date_of_deliver < (SELECT starting_date FROM project WHERE project_id = new.project_id)) then
		signal sqlstate '45000' set message_text = 'invalid date for deliverable';
    end if;	
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`deliverable_BEFORE_UPDATE` BEFORE UPDATE ON `deliverable` FOR EACH ROW
BEGIN
	if(new.date_of_deliver < (SELECT starting_date FROM project WHERE project_id = new.project_id)) then
		signal sqlstate '45000' set message_text = 'invalid date for deliverable';
    end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`licensing_BEFORE_INSERT` BEFORE INSERT ON `licensing` FOR EACH ROW
BEGIN
	if exists(SELECT * FROM licensing WHERE licensing_project_id = new.licensing_project_id) then
		signal sqlstate '45000' set message_text = 'Project has a program';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`administrationex_BEFORE_INSERT` BEFORE INSERT ON `administration_ex` FOR EACH ROW
BEGIN
	if exists(SELECT * FROM administration_ex WHERE administrationex_project_id = new.administrationex_project_id) then
		signal sqlstate '45000' set message_text = 'Project has an administrating executive';
    end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`administration_BEFORE_INSERT` BEFORE INSERT ON `administration` FOR EACH ROW
BEGIN
	if exists(SELECT * FROM administration WHERE administration_project_id = new.administration_project_id) then
		signal sqlstate '45000' set message_text = 'Project has an administrating organisation';
    end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`science_director_BEFORE_INSERT` BEFORE INSERT ON `science_director` FOR EACH ROW
BEGIN
	if exists(SELECT * FROM science_director WHERE dir_project_id = new.dir_project_id) then
		signal sqlstate '45000' set message_text = 'Project has a director';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`employee_BEFORE_INSERT` BEFORE INSERT ON `employee` FOR EACH ROW
BEGIN
	if exists(SELECT * FROM employee WHERE emp_researcher_id = new.emp_researcher_id) then
		signal sqlstate '45000' set message_text = 'Researcher has an employer';
    end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`phones_BEFORE_INSERT` BEFORE INSERT ON `phones` FOR EACH ROW
BEGIN
	if (LENGTH(new.phone_number) <> 10) then
		signal sqlstate '45000' set message_text = 'Not valid phone';
    end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`phones_BEFORE_UPDATE` BEFORE UPDATE ON `phones` FOR EACH ROW
BEGIN
	if (LENGTH(new.phone_number)  <> 10) then
		signal sqlstate '45000' set message_text = 'Not valid phone';
    end if;
    if ((new.phone_number) in(SELECT phone_number from phones WHERE organisation_id = new.organisation_id)) then
		signal sqlstate '45000' set message_text = 'Already in';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`budgetu_BEFORE_INSERT` BEFORE INSERT ON `budgetu` FOR EACH ROW
BEGIN
	if ((SELECT organisation_type FROM organisation WHERE organisation_id = new.u_organisation_id) <> "university") then
		signal sqlstate '45000' set message_text = 'Invalid budget target';
	end if;
    if exists(SELECT * FROM budgetu WHERE u_organisation_id = new.u_organisation_id) then
		signal sqlstate '45000' set message_text = 'Organisation has a budget';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`budgetres_BEFORE_INSERT` BEFORE INSERT ON `budgetres` FOR EACH ROW
BEGIN
	if ((SELECT organisation_type FROM organisation WHERE organisation_id = new.r_organisation_id) <> "research center") then
		signal sqlstate '45000' set message_text = 'Invalid budget target';
	end if;
    if exists(SELECT * FROM budgetres WHERE r_organisation_id = new.r_organisation_id) then
		signal sqlstate '45000' set message_text = 'Organisation has a budget';
	end if;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`budgetcom_BEFORE_INSERT` BEFORE INSERT ON `budgetcom` FOR EACH ROW
BEGIN
	if ((SELECT organisation_type FROM organisation WHERE organisation_id = new.c_organisation_id) <> "company") then
		signal sqlstate '45000' set message_text = 'Invalid budget target';
	end if;
    if exists(SELECT * FROM budgetcom WHERE c_organisation_id = new.c_organisation_id) then
		signal sqlstate '45000' set message_text = 'Organisation has a budget';
	end if;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
